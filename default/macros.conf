[channel]
definition = | eval http_channel=if(http_referer="-","Direct", if(http_referer_domain==settings_site,"Direct", if(isnull(http_channel), "Referal", http_channel))) | eval http_session_channel=if(http_session_referrer="-","Direct", if(http_session_referrer_domain==settings_site,"Direct", if(isnull(http_session_channel) AND isnotnull(http_session), "Referal", http_session_channel)))
iseval = 0

[analytics_goal(3)]
args = attribute,goal,site
iseval = 0
definition = search index=goal_summary Web.site=$site$ goal_id="goal_$goal$"\
| stats sum(Sessions) AS Sessions, sum(Completed) AS Completed by Web.$attribute$\
| addcoltotals Sessions Completed labelfield=Web.$attribute$\
| eval ConversionRate=round(if(isnull(Completed/Sessions),0,100*(Completed/Sessions)),2)."%"\
| rename Completed AS "Completed (Goal $goal$)",ConversionRate AS "Conversion Rate (Goal $goal$)" Web.$attribute$ AS $attribute$

[analytics(2)]
args = attribute,site
iseval = 0
definition = tstats summariesonly=t max(Web.http_session_pageviews) AS http_session_pageviews,max(Web.http_session_duration) AS http_session_duration,first(Web.$attribute$) AS $attribute$ FROM datamodel=Web WHERE Web.site="$site$" "Web.eventtype"=pageview GROUPBY Web.http_session | stats count(eval(http_session_pageviews=1)) AS Bounces, count(eval(http_session_pageviews>1)) AS NonBounces,avg(http_session_pageviews) AS "Pages/Session", count AS Sessions, sum(http_session_pageviews) AS Pageviews, sum(http_session_duration) AS Duration by $attribute$  | eventstats sum(Sessions) as TotalSessions  | addcoltotals Sessions Pageviews Duration Bounces NonBounces labelfield=$attribute$ | filldown TotalSessions | eval "Bounce rate"=round(100*(Bounces/(Bounces+NonBounces)),2) | eval "% Sessions"=round((Sessions/TotalSessions)*100,2) | eval "% Sessions"='% Sessions'."%" | eval "Bounce rate"='Bounce rate'."%" | eval "Pages/Session"=round(Pageviews/Sessions,2) | eval "Avg. Session Duration"=round(Duration/Sessions,2) \
| fields $attribute$ Sessions "% Sessions" Pageviews "Bounce rate" "Pages/Session" "Avg. Session Duration"

[addTimeCompareWindow]
definition = addinfo\
| eval window=info_max_time-info_min_time\
| eval windowLength=case(window<7200, "1h",window<28800, "4h",window<90000, "24h",window<90000*7, "1w",window<90000*31, "1mon")\
| eval earliestCompare=\
case(\
ImmediatePeriodCompare=1, info_min_time-window,\
ImmediatePeriodCompare!=1 AND windowLength="1h", relative_time(info_min_time,"-1h"),\
ImmediatePeriodCompare!=1 AND windowLength="4h", relative_time(info_min_time,"-1d"),\
ImmediatePeriodCompare!=1 AND windowLength="24h", relative_time(info_min_time,"-7d"),\
ImmediatePeriodCompare!=1 AND windowLength="1w", relative_time(info_min_time,"-4w"),\
ImmediatePeriodCompare!=1 AND windowLength="1mon", relative_time(info_min_time,"-12mon")\
)\
| eval latestCompare=\
case(\
ImmediatePeriodCompare=1, info_min_time,\
ImmediatePeriodCompare!=1 AND windowLength="1h", relative_time(info_max_time,"-1d"),\
ImmediatePeriodCompare!=1 AND windowLength="4h", relative_time(info_max_time,"-1d"),\
ImmediatePeriodCompare!=1 AND windowLength="24h", relative_time(info_max_time,"-7d"),\
ImmediatePeriodCompare!=1 AND windowLength="1w", relative_time(info_max_time,"-4w"),\
ImmediatePeriodCompare!=1 AND windowLength="1mon", relative_time(info_max_time,"-12mon")\
)\
| eval ComparePeriodDescription= \
case( \
ImmediatePeriodCompare=1 AND windowLength="1h", "Compared to last hour", \
ImmediatePeriodCompare=1 AND windowLength="4h", "Compared to last 4 hours", \
ImmediatePeriodCompare=1 AND windowLength="24h", "Compared to yesterday", \
ImmediatePeriodCompare=1 AND windowLength="1w",  "Compared to last week", \
ImmediatePeriodCompare=1 AND windowLength="1mon",  "Compared to last month", \
ImmediatePeriodCompare!=1 AND windowLength="1h", "Compared to same hour yesterday", \
ImmediatePeriodCompare!=1 AND windowLength="4h", "Compared to same 4 hours yesterday", \
ImmediatePeriodCompare!=1 AND windowLength="24h",  "Compared to same day last week", \
ImmediatePeriodCompare!=1 AND windowLength="1w",  "Compared to same week 4 weeks ago", \
ImmediatePeriodCompare!=1 AND windowLength="1mon",  "Compared to same month last year" \
)\
| eval FieldnameCurrentPeriod=case(\
    windowLength="1h","Count_latest_hour",\
    windowLength="4h","Count_latest_4hours",\
    windowLength="24h","Count_latest_24hours",\
    windowLength="7d","Count_latest_week",\
windowLength="1w","Count_latest_week",\
    windowLength="30d","Count_latest_month",\
1=1, "Count_latest*"\
) \
| eval FieldnameComparePeriod=case(\
    windowLength="1h" AND ImmediatePeriodCompare=0,"Count_24hours_before",\
    windowLength="1h" AND ImmediatePeriodCompare=1,"Count_1hour_before",\
    windowLength="4h" AND ImmediatePeriodCompare=0,"Count_24hours_before",\
    windowLength="4h" AND ImmediatePeriodCompare=1,"Count_4hours_before",\
    windowLength="24h" AND ImmediatePeriodCompare=0,"Count_168hours_before",\
    windowLength="24h" AND ImmediatePeriodCompare=1,"Count_24hours_before",\
    windowLength="1w" AND ImmediatePeriodCompare=0,"Count_4weeks_before",\
    windowLength="1w" AND ImmediatePeriodCompare=1,"Count_1week_before",\
    windowLength="30d" AND ImmediatePeriodCompare=0,"Count_360days_before",\
    windowLength="30d" AND ImmediatePeriodCompare=1,"Count_30days_before",\
    windowLength="1mon" AND ImmediatePeriodCompare=0,"Count_12months_before",\
    windowLength="1mon" AND ImmediatePeriodCompare=1,"Count_1month_before",\
    ImmediatePeriodCompare=0,"Count*_before",\
    ImmediatePeriodCompare=1,"Count*_before"\
    )
iseval = 0

[generateTimeComparison]
definition = eval CountMerge=Count+"_"+info_max_time+","+CountCompare+"_"+latestCompare\
| fields CountMerge\
| makemv delim="," CountMerge\
| mvexpand CountMerge\
| rex field=CountMerge "(?<Count>[^_]*)_(?<_time>.*)"\
| fields - CountMerge\
| sort _time
iseval = 0
