[Generate user sessions]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = eventtype=pageview | eval time=_time | eval http_referer = _time."_".http_referer | eval http_referer_domain = _time."_".http_referer_domain | eval http_referer_hostname = _time."_".http_referer_hostname | transaction clientip http_user_agent maxpause=15m keepevicted=f | eval user=md5(clientip."_".http_user_agent)| eval http_session=md5(clientip."_".http_user_agent."_"._time) |  stats first(user) as user, first(http_session) AS http_session, first(time) AS http_session_start, last(time) AS http_session_end,count(http_request) AS http_session_pageviews,first(duration) as http_session_duration,first(http_referer) as http_referer,first(http_referer_domain) as http_referer_domain,first(http_referer_hostname) as http_referer_hostname by _time | search user=* | eval http_referer=replace(http_referer,"^[0-9]*_","") | eval http_referer_domain=replace(http_referer_domain,"^[0-9]*_","") | eval http_referer_hostname=replace(http_referer_hostname,"^[0-9]*_","") | lookup WA_channels Hostname AS http_referer_hostname OUTPUT Channel AS http_session_channel | eval http_session_channel=if(http_referer="-","Direct", if(like(http_referer_domain,"%".site."%"),"Direct", if(isnull(http_session_channel) AND isnotnull(http_session), "Referal", http_session_channel))) | outputlookup WA_sessions.csv createinapp=true | table _time,user,http_session,http_session_start,http_session_end,http_session_pageviews,http_session_duration,http_referer,http_referer_domain,http_referer_hostname,http_session_channel

[Generate pages]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site","http_session__referer","http_session_duration","http_session_pageviews","http_session_referer_domain","http_session_referer_hostname","http_session_start","http_session_channel","http_session_referer"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = eventtype=pageview | table site http_request | dedup site http_request | outputlookup WA_pages.csv createinapp=t

[Generate pages - scheduled]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */10 * * * *
enableSched = 1
search = | inputlookup WA_pages.csv | append [search eventtype=pageview  _index_earliest=-60m@m | table site http_request | dedup site http_request ] | dedup site http_request  | table http_request,site | outputlookup WA_pages.csv createinapp=t

[Generate user sessions - scheduled]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */10 * * * *
dispatch.earliest_time = 1
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
enableSched = 1
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = |inputlookup WA_sessions | appendcols [| tstats summariesonly=t max(_time) AS _time FROM datamodel=Web GROUPBY Web.http_session | sort -_time | head 1 | rename _time AS datamodel_update_time | fields datamodel_update_time]| filldown datamodel_update_time | where _time>=datamodel_update_time | append [search eventtype=pageview _index_earliest=-24h@h _index_latest=now | eval time=_time | eval http_referer = _time."_".http_referer | eval http_referer_domain = _time."_".http_referer_domain | eval http_referer_hostname = _time."_".http_referer_hostname | transaction clientip http_user_agent maxpause=15m keepevicted=f | eval user=md5(clientip."_".http_user_agent)| eval http_session=md5(clientip."_".http_user_agent."_"._time) |  stats first(user) as user, first(http_session) AS http_session, first(time) AS http_session_start, last(time) AS http_session_end,count(http_request) AS http_session_pageviews,first(duration) as http_session_duration,first(http_referer) as http_referer,first(http_referer_domain) as http_referer_domain,first(http_referer_hostname) as http_referer_hostname by _time | search user=* | eval http_referer=replace(http_referer,"^[0-9]*_","") | eval http_referer_domain=replace(http_referer_domain,"^[0-9]*_","") | eval http_referer_hostname=replace(http_referer_hostname,"^[0-9]*_","") | dedup http_session | lookup WA_channels Hostname AS http_referer_hostname OUTPUT Channel AS http_session_channel | eval http_session_channel=if(http_referer="-","Direct", if(like(http_referer_domain,"%".site."%"),"Direct", if(isnull(http_session_channel) AND isnotnull(http_session), "Referal", http_session_channel))) ]| table _time,user,http_session,http_session_start,http_session_end,http_session_pageviews,http_session_duration,http_referer,http_referer_domain,http_referer_hostname http_session_channel | outputlookup WA_sessions.csv createinapp=true
disabled = 0

[Data Model Acceleration Details]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.track = 0
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/data/models search="acceleration=1"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| map maxsearches=30 \
search="| rest /servicesNS/nobody/$App$/admin/summarization/tstats:DM_$App$_$Data_Model$ | fields summary* \
| rename summary.access_count AS "Access_Count" \
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.earliest_time AS "Min_Time"\
summary.latest_time AS "Max_Time"\
summary.is_inprogress AS "Summary_in_Progress"\
| eval Status=round(Status*100,2).\"%\"\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Data_Model=\"$Data_Model$\" \
| eval Acceleration_Retention=\"$Acceleration_Retention$\" \
| eval App=\"$App$\" \
| eval Acceleration=\"$Acceleration$\" \
| eval Cron=\"$Cron$\""\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| fieldformat Min_Time=strftime(Min_Time, "%d/%m/%Y %H:%M:%S")  \
| fieldformat Max_Time=strftime(Max_Time, "%d/%m/%Y %H:%M:%S") \
| fieldformat Now_Time=strftime(Now_Time, "%d/%m/%Y %H:%M:%S") \
| table Data_Model App Acceleration Acceleration_Retention Cron Summary_in_Progress Status Size_on_Disk_(Mb) Last_Error Min_Time Max_Time Now_Time Lag_Seconds Lag_Minutes Lag_Hours

[Top Accelerations By Size]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.track = 0
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/data/models search="acceleration=1"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| map maxsearches=30 \
search="| rest /servicesNS/nobody/$App$/admin/summarization/tstats:DM_$App$_$Data_Model$ | fields summary* \
| rename summary.access_count AS "Access_Count" \
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.earliest_time AS "Min_Time"\
summary.latest_time AS "Max_Time"\
summary.is_inprogress AS "Summary_in_Progress"\
| eval Status=round(Status*100,2).\"%\"\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Data_Model=\"$Data_Model$\" \
| eval Acceleration_Retention=\"$Acceleration_Retention$\" \
| eval App=\"$App$\" \
| eval Acceleration=\"$Acceleration$\" \
| eval Cron=\"$Cron$\""\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| table Data_Model Size_on_Disk_(Mb) | sort -Size_on_Disk_(Mb)

[Top Accelerations by Complete Status]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.track = 0
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/data/models search="acceleration=1"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| map maxsearches=30 \
search="| rest /servicesNS/nobody/$App$/admin/summarization/tstats:DM_$App$_$Data_Model$ | fields summary* \
| rename summary.access_count AS "Access_Count" \
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.earliest_time AS "Min_Time"\
summary.latest_time AS "Max_Time"\
summary.is_inprogress AS "Summary_in_Progress"\
| eval Status=round(Status*100,2)\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Data_Model=\"$Data_Model$\" \
| eval Acceleration_Retention=\"$Acceleration_Retention$\" \
| eval App=\"$App$\" \
| eval Acceleration=\"$Acceleration$\" \
| eval Cron=\"$Cron$\""\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| fieldformat Min_Time=strftime(Min_Time, "%d/%m/%Y %H:%M:%S")  \
| fieldformat Max_Time=strftime(Max_Time, "%d/%m/%Y %H:%M:%S") \
| fieldformat Now_Time=strftime(Now_Time, "%d/%m/%Y %H:%M:%S") \
| table Data_Model Status
