[Generate user sessions]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = eventtype=pageview site=* | eval time=_time | eval http_referer = _time."_".http_referer | eval http_referer_domain = _time."_".http_referer_domain | eval http_referer_hostname = _time."_".http_referer_hostname | fields _time time http_referer http_referer_domain http_referer_hostname site clientip http_user_agent http_request| transaction site clientip http_user_agent maxpause=30m maxspan=4h keepevicted=f | eval user=md5(clientip."_".http_user_agent)| eval http_session=md5(clientip."_".http_user_agent."_"._time) |  stats first(site) as site,first(user) as user, first(time) AS http_session_start, last(time) AS http_session_end,count(http_request) AS http_session_pageviews,first(duration) as http_session_duration,first(http_referer) as http_session_referrer,first(http_referer_domain) as http_session_referrer_domain,first(http_referer_hostname) as http_session_referrer_hostname by _time,http_session | search user=* | eval http_session_referrer=replace(http_session_referrer,"^[0-9]*_","") | eval http_session_referrer_domain=if(http_session_referrer="-","-",replace(http_session_referrer_domain,"^[0-9]*_","")) | eval http_session_referrer_hostname=if(http_session_referrer="-","-",replace(http_session_referrer_hostname,"^[0-9]*_","")) | lookup WA_channels Hostname AS http_session_referrer_hostname OUTPUT Channel AS http_session_channel | eval http_session_channel=if(http_session_referrer="-","Direct", if(like(site,"%".http_session_referrer_domain),"Direct", if(isnull(http_session_channel) AND isnotnull(http_session), "Referal", http_session_channel))) | table acceleration,datamodel_update_time,count,_time,site,user,http_session,http_session_start,http_session_end,http_session_pageviews,http_session_duration,http_session_referrer,http_session_referrer_domain,http_session_referrer_hostname,http_session_channel | outputlookup WA_sessions createinapp=true

[Generate pages]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
auto_summarize.dispatch.earliest_time = -1d@h
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site","http_session__referer","http_session_duration","http_session_pageviews","http_session_referer_domain","http_session_referer_hostname","http_session_start","http_session_channel","http_session_referer"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = eventtype=pageview [| inputlookup WA_settings | fields value | dedup value | rename value AS site] | top limit=100 http_request by site | fields site http_request | table site http_request | outputlookup WA_pages createinapp=t

[Generate pages - scheduled]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
enableSched = 1
search = eventtype=pageview [| inputlookup WA_settings | fields value | dedup value | rename value AS site] | top limit=100 http_request by site | fields site http_request | table site http_request | outputlookup WA_pages createinapp=t

[Generate user sessions - scheduled]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */10 * * * *
dispatch.earliest_time = 1
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_os","http_os_version","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","http_referer_domain","http_referer_hostname","http_channel","settings_site"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = bar
display.visualizations.show = 0
display.visualizations.type = mapping
enableSched = 1
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
disabled = 0
search = |inputlookup WA_sessions\
| appendcols [| tstats summariesonly=t max(_time) AS _time FROM datamodel=Web GROUPBY Web.http_session | sort -_time | head 1 | rename _time AS datamodel_update_time | fields datamodel_update_time]\
| appendcols [| rest /servicesNS/-/-/data/models splunk_server=local search="acceleration=* eai:acl.app=SplunkAppForWebAnalytics" | fields acceleration] \
| append [search eventtype=pageview _index_earliest=-20m@m _index_latest=now site=* | eval time=_time | eval http_referer = _time."_".http_referer | eval http_referer_domain = _time."_".http_referer_domain | eval http_referer_hostname = _time."_".http_referer_hostname | fields _time time http_referer http_referer_domain http_referer_hostname site clientip http_user_agent http_request | transaction site clientip http_user_agent maxpause=30m maxspan=4h keepevicted=f | eval user=md5(clientip."_".http_user_agent)| eval http_session=md5(clientip."_".http_user_agent."_"._time) |  stats first(site) as site,first(user) as user,  first(time) AS http_session_start, last(time) AS http_session_end,count(http_request) AS http_session_pageviews,first(duration) as http_session_duration,first(http_referer) as http_session_referrer,first(http_referer_domain) as http_session_referrer_domain,first(http_referer_hostname) as http_session_referrer_hostname by _time,http_session | search user=* | eval http_session_referrer=replace(http_session_referrer,"^[0-9]*_","") | eval http_session_referrer_domain=if(http_session_referrer="-","-",replace(http_session_referrer_domain,"^[0-9]*_","")) | eval http_session_referrer_hostname=if(http_session_referrer="-","-",replace(http_session_referrer_hostname,"^[0-9]*_","")) | dedup http_session | lookup WA_channels Hostname AS http_session_referrer_hostname OUTPUT Channel AS http_session_channel | eval http_session_channel=if(http_session_referrer="-","Direct", if(like(site,"%".http_session_referrer_domain),"Direct", if(isnull(http_session_channel) AND isnotnull(http_session), "Referal", http_session_channel))) ] | dedup http_session \
|  filldown datamodel_update_time acceleration\
| where \
(_time>=datamodel_update_time AND acceleration=1)\
OR\
(acceleration=1 AND isnull(datamodel_update_time))\
OR\
((_time>relative_time(now(), "-1d@d")) AND (acceleration=0 OR acceleration='' OR isnull(acceleration)))\
| reverse | streamstats count  | where count <1000000\
| table acceleration,datamodel_update_time,count,_time,site,user,http_session,http_session_start,http_session_end,http_session_pageviews,http_session_duration,http_session_referrer,http_session_referrer_domain,http_session_referrer_hostname http_session_channel | outputlookup WA_sessions createinapp=t


[Top Accelerations By Size]
search = | rest /servicesNS/-/-/data/models splunk_server=local search="acceleration=* eai:acl.app=SplunkAppForWebAnalytics"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| map maxsearches=30 \
search="| rest /servicesNS/nobody/$App$/admin/summarization/tstats:DM_$App$_$Data_Model$ splunk_server=local | fields summary* \
| rename summary.access_count AS "Access_Count" \
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.earliest_time AS "Min_Time"\
summary.latest_time AS "Max_Time"\
summary.is_inprogress AS "Summary_in_Progress"\
| eval Status=round(Status*100,2).\"%\"\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Data_Model=\"$Data_Model$\" \
| eval Acceleration_Retention=\"$Acceleration_Retention$\" \
| eval App=\"$App$\" \
| eval Acceleration=\"$Acceleration$\" \
| eval Cron=\"$Cron$\""\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| table Data_Model Size_on_Disk_(Mb) | sort -Size_on_Disk_(Mb)

[Top Accelerations by Complete Status]
search = | rest /servicesNS/-/-/data/models splunk_server=local search="acceleration=* eai:acl.app=SplunkAppForWebAnalytics"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| map maxsearches=30 \
search="| rest /servicesNS/nobody/$App$/admin/summarization/tstats:DM_$App$_$Data_Model$ splunk_server=local | fields summary* \
| rename summary.access_count AS "Access_Count" \
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.earliest_time AS "Min_Time"\
summary.latest_time AS "Max_Time"\
summary.is_inprogress AS "Summary_in_Progress"\
| eval Status=round(Status*100,2)\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Data_Model=\"$Data_Model$\" \
| eval Acceleration_Retention=\"$Acceleration_Retention$\" \
| eval App=\"$App$\" \
| eval Acceleration=\"$Acceleration$\" \
| eval Cron=\"$Cron$\""\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| fieldformat Min_Time=strftime(Min_Time, "%d/%m/%Y %H:%M:%S")  \
| fieldformat Max_Time=strftime(Max_Time, "%d/%m/%Y %H:%M:%S") \
| fieldformat Now_Time=strftime(Now_Time, "%d/%m/%Y %H:%M:%S") \
| table Data_Model Status

[Data Model Acceleration Details]
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = -30d
display.general.type = statistics
display.page.search.tab = statistics
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/data/models splunk_server=local search="acceleration=* eai:acl.app=SplunkAppForWebAnalytics"\
| rename "acceleration.earliest_time" as Acceleration_Retention "eai:acl.app" as App "acceleration.cron_schedule" as Cron "acceleration" as Acceleration title AS Data_Model\
| table Data_Model App Acceleration Cron Acceleration_Retention updated \
| eval Cron=if(isnull(Cron),"",Cron)\
| join Data_Model type=outer [|tstats max(_time) AS Max_Time FROM datamodel=Web | eval Data_Model="Web"]\
| join App type=outer [| rest /servicesNS/nobody/SplunkAppForWebAnalytics/admin/summarization/tstats:DM_SplunkAppForWebAnalytics_Web splunk_server=local | fields eai:acl.app summary* \
| rename summary.access_count AS "Access_Count" \
eai:acl.app AS App\
summary.access_time AS "Last_Access"\
summary.buckets AS "Buckets"\
summary.complete AS "Status"\
summary.size AS "Size_on_Disk_(Mb)"\
summary.last_error AS "Last_Error"\
summary.time_range AS "Summary_Range"\
summary.mod_time AS "Updated"\
summary.is_inprogress AS "Summary_in_Progress"\
summary.earliest_time AS "Min_Time"]\
| eval Status=round(Status*100,2)."%"\
| eval "Size_on_Disk_(Mb)"=round('Size_on_Disk_(Mb)'/1024/1024,2)\
| eval Now_Time=now() \
| eval Lag_Seconds=Now_Time-Max_Time \
| eval Lag_Minutes=round(Lag_Seconds/60,1) \
| eval Lag_Hours=round(Lag_Minutes/60,1) \
| fieldformat Min_Time=strftime(Min_Time, "%d/%m/%Y %H:%M:%S")  \
| fieldformat Max_Time=strftime(Max_Time, "%d/%m/%Y %H:%M:%S") \
| fieldformat Now_Time=strftime(Now_Time, "%d/%m/%Y %H:%M:%S") \
| table Data_Model App Acceleration Acceleration_Retention Cron Summary_in_Progress Status Size_on_Disk_(Mb) Last_Error Min_Time Max_Time Now_Time Lag_Seconds Lag_Minutes Lag_Hours


[Generate Goal summary - Scheduled]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 5,15,25,35,45,55 * * * *
dispatch.earliest_time = -15m@m
dispatch.latest_time = -5m@m
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","file","clientip","eventtype","site","goal_end","goal_start","goal_id","uri"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
display.visualizations.type = mapping
enableSched = 1
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = | inputlookup WA_goals\
| map maxsearches=10000 search="search tag=web eventtype=pageview site=\"$site$\" \
| eval goal_id=\"$goal_id$\"\
| eval goal_start=\"$start$\"\
| eval goal_end=\"$end$\"\
| rex field=goal_start mode=sed \"s/\*/%/g\" \
| rex field=goal_end mode=sed \"s/\*/%/g\"\
| lookup WA_sessions user AS user OUTPUT http_session,http_session_start,http_session_end,http_session_pageviews,http_session_duration,http_referer,http_referer_domain AS http_session_referrer_domain,http_referer_hostname AS http_session_referrer_hostname,http_session_channel\
| where isnotnull(http_session)\
| lookup user_agents http_user_agent\
| eval ua_mobile=if(eventtype==\"ua-mobile\",'ua_device', \"\")\
| bucket _time span=10m\
| stats dc(http_session) AS Sessions,dc(user) AS Users,count(eval(like(uri,goal_start))) AS Entries,count(eval(like(uri,goal_end))) AS Completed by _time, site, goal_id, http_session_channel, http_session_referrer_domain,ua_family,ua_mobile,ua_os_family,goal_id\
| eval goal_start=\"$start$\"\
| eval goal_end=\"$end$\"\
| collect index=goal_summary\
"\

[Generate Goal summary - Backfill]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","http_locale","http_method","http_referer","http_request","http_user_agent","aaaa","http_user_agent","http_session","channel","file","clientip","eventtype","site","goal_end","goal_start","goal_id","uri"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
display.visualizations.type = mapping
request.ui_dispatch_app = SplunkAppForWebAnalytics
request.ui_dispatch_view = search
search = | inputlookup WA_goals\
| map maxsearches=10000 search="\
| tstats summariesonly=t count AS Pageviews FROM datamodel=Web\
WHERE Web.site=\"$site$\" "Web.eventtype"=pageview\
GROUPBY _time span=1h,Web.http_session,Web.user,Web.uri,Web.site,Web.http_session_channel,Web.http_session_referrer_domain, Web.ua_family, Web.ua_mobile, Web.ua_os_family\
| eval goal_id=\"$goal_id$\"\
| eval goal_start=\"$start$\"\
| eval goal_end=\"$end$\"\
| rex field=goal_start mode=sed \"s/\*/%/g\"\
| rex field=goal_end mode=sed \"s/\*/%/g\"\
| stats dc(Web.http_session) AS Sessions,dc(Web.user) AS Users,count(eval(like('Web.uri',goal_start))) AS Entries,count(eval(like('Web.uri',goal_end))) AS Completed by _time, Web.site, Web.http_session_channel, Web.http_session_referrer_domain,Web.ua_family,Web.ua_mobile,Web.ua_os_family,goal_id\
| collect index=goal_summary\
"
